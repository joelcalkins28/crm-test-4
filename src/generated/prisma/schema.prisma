// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
// See: https://next-auth.js.org/adapters/prisma#prisma-schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[] // Relation to Contact model
  applications  Application[] // Relation to Application model
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Specific Models

enum ApplicationStatus {
  WISHLIST
  APPLIED
  INTERVIEWING
  OFFER
  REJECTED
  GHOSTED
}

model Contact {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  firstName    String
  lastName     String?
  email        String?       @unique
  phone        String?
  company      String?
  role         String?
  notes        String?
  tags         String? // Changed from String[] to String? (comma-separated)
  userId       String // Relation to User model
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications Application[] // Relation to applications where this contact is involved
}

model Application {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  companyName    String
  jobTitle       String
  status         ApplicationStatus @default(APPLIED)
  dateApplied    DateTime?
  jobDescription String?
  salary         String?
  location       String?
  applicationUrl String?
  notes          String?
  // Documents might be added later as a separate model or external storage link
  userId         String // Relation to User model
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactId      String? // Optional relation to a specific contact
  contact        Contact?          @relation(fields: [contactId], references: [id])
}
